{"version":3,"sources":["components/Led.js","features/clock/clockSlice.js","components/Cpu/Clock.js","features/controller/ucounterSlice.js","components/Cpu/MicroCodeCounter.js","features/bus/busSlice.js","components/Cpu/Bus.js","features/controller/programCounterSlice.js","components/Cpu/ProgramCounter.js","features/ram/ramSlice.js","features/ram/program.js","components/Cpu/Ram.js","features/register/registerSlice.js","components/Cpu/Register.js","features/alu/aluSlice.js","components/Cpu/Alu.js","features/controller/isa_rom.js","features/controller/controllerSlice.js","components/Cpu/Controller.js","features/cpu/cpuSlice.js","components/Cpu/Cpu.js","components/LogicAnalyser/Canvas.js","components/LogicAnalyser/lib/Waveform.js","components/Visual.js","components/App.js","serviceWorker.js","app/store.js","index.js"],"names":["Led","className","this","props","on","React","Component","clockSlice","createSlice","name","initialState","value","reducers","tick","state","action","payload","actions","selectClock","clock","Clock","halt","useState","isActive","setIsActive","dispatch","useDispatch","clk","useSelector","useEffect","interval","setInterval","clearInterval","onClick","id","ucounterSlice","reset","increment","selectUCount","ucounter","MicroCodeCounter","countReset","busSlice","setBus","selectBus","bus","Bus","programCounterSlice","load","selectPC","programCounter","ProgramCounter","inc","input","co","out","pcReset","pcLoad","ramSlice","address","memory","selectRamValue","ram","selectRamAddress","Ram","readAddress","ro","addr","ramLoad","toString","toUpperCase","registerSlice","values","regInstruction","regMar","regA","regB","regOut","key","selectRegisters","register","Register","oe","inputRef","useRef","regReset","current","regLoad","aluSlice","calculate","sub","Number","isInteger","selectAlu","alu","Alu","eo","rom","i","bitRead","bit","decode","hlt","mi","ri","io","ii","ai","ao","su","bi","oi","ce","j","jc","controllerSlice","romValue","cw","buildControlWord","ucount","instruction","selectRomValue","controller","selectControlWord","selectControlAddr","Controller","counter","cpuSlice","selectReset","cpu","Cpu","registers","controlWord","val","Canvas","waveform","signal","rest","canvasRef","ctx","getContext","update","ref","Waveform","strokeStyle","startX","startY","currentX","currentY","width","height","currentSignal","yEnd","xStart","yStart","xEnd","beginPath","moveTo","lineTo","stroke","waves","Visual","App","Boolean","window","location","hostname","match","configureStore","reducer","cpuReducer","clockReducer","busReducer","registerReducer","ucounterReducer","programCounterReducer","controllerReducer","aluReducer","ramReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11f2dfac.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/led.css';\n\nclass Led extends React.Component {\n  render() {\n    let className = 'off';\n    if (this.props.on) {\n      className = 'on';\n    }\n    return (\n      <div className={`led ${className}`}></div>\n    );\n  }\n}\n\nexport default Led;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const clockSlice = createSlice({\n  name: 'clock',\n  initialState: {\n    value: 1, // intentionally not true so the microcounter does tick at the start\n  },\n  reducers: {\n    tick: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { tick } = clockSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.clock.value)`\nexport const selectClock = state => state.clock.value;\n\nexport default clockSlice.reducer;\n","\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Led from '../Led';\nimport { tick, selectClock } from '../../features/clock/clockSlice';\n\nimport '../../css/clock.css';\n\nconst Clock = ({halt}) => {\n  const [isActive, setIsActive] = useState(false);\n  const dispatch = useDispatch();\n  const clk = useSelector(selectClock);\n\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive && !halt) {\n      interval = setInterval(() => {\n        dispatch(tick(!clk));\n      }, 1000);\n    } else if (!isActive) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, clk, halt, dispatch]);\n\n  return (\n    <div>\n      <div>\n        <button\n        className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`}\n        onClick={toggle}>\n          {isActive ? 'Pause' : 'Start'}\n        </button>\n\n        <button onClick={() => dispatch(tick(!clk))}>\n        {clk ? 'Go to negedge' : 'Go to posedge'}\n        </button>\n      </div>\n\n      <div id=\"clock\" className=\"module\">\n        <div className=\"name\">Clock: </div>\n        <Led on={clk} />\n      </div>\n    </div>\n  );\n};\n\nexport default Clock;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const ucounterSlice = createSlice({\n  name: 'ucounter',\n  initialState: {\n    value: 0,\n  },\n\n  reducers: {\n    reset: state => {\n      state.value = 0;\n    },\n    increment: state => {\n      // Increment, but only up to 4.\n      if (state.value < 4) {\n        state.value++;\n      } else {\n        state.value = 0;\n      }\n    },\n  },\n});\n\nexport const { reset, increment } = ucounterSlice.actions;\n\nexport const selectUCount = state => state.ucounter.value;\n\nexport default ucounterSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  reset as countReset,\n  increment,\n  selectUCount\n} from '../../features/controller/ucounterSlice';\n\nconst MicroCodeCounter = ({ reset, clk }) => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectUCount);\n\n  // Reset\n  useEffect(() => {\n    if (reset === true) {\n      dispatch(countReset());\n    }\n  }, [reset, dispatch]);\n\n  // Clock tick\n  useEffect(() => {\n    // @negedge\n    if (clk === false) {\n      dispatch(increment());\n    }\n  }, [clk, dispatch]);\n\n  return (\n    <div id=\"microcode\" className=\"module\">\n      <div className=\"name\">Micro code counter: </div>\n      <div className=\"value\">{value}</div>\n    </div>\n  );\n};\n\nexport default MicroCodeCounter;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const busSlice = createSlice({\n  name: 'bus',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    setBus: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setBus } = busSlice.actions;\n\nexport const selectBus = state => state.bus.value;\n\nexport default busSlice.reducer;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectBus } from '../../features/bus/busSlice';\n\nimport '../../css/bus.css';\n\nconst Bus = () => {\n  const bus = useSelector(selectBus);\n  return (\n    <div id=\"bus\" className=\"module\">\n      <div className=\"name\">Bus: </div>\n      <div className=\"value\">\n        {/* 0x{bus.toString(16).toUpperCase()} */}\n         ({bus})\n      </div>\n    </div>\n  );\n}\n\nexport default Bus;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const programCounterSlice = createSlice({\n  name: 'programCounter',\n  initialState: {\n    value: 0,\n    reset: false,\n  },\n\n  reducers: {\n    reset: (state, action) => {\n      if (action.payload) {\n        state.value = 0;\n        state.reset = true;\n      } else {\n        state.reset = false;\n      }\n    },\n    increment: state => {\n      if (state.reset) {\n        // Do nothing while in reset.\n        return;\n      }\n      // Increment, but only up to 15.\n      if (state.value < 15) {\n        state.value++;\n      } else {\n        state.value = 0;\n      }\n    },\n    load: (state, action) => {\n      if (state.reset) {\n        // Do nothing while in reset.\n        return;\n      }\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { reset, increment, load } = programCounterSlice.actions;\n\nexport const selectPC = state => state.programCounter.value;\n\nexport default programCounterSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectPC,\n  reset as pcReset,\n  load as pcLoad,\n  increment,\n} from '../../features/controller/programCounterSlice';\n\nconst ProgramCounter = ({ reset, clk, inc, load, input, co, out }) => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectPC);\n\n  // Reset\n  useEffect(() => {\n    dispatch(pcReset(reset));\n  }, [reset, dispatch]);\n\n  // Output enable\n  useEffect(() => {\n    if (co) {\n      out(value);\n    }\n  }, [co, out, value]);\n\n  // Increment\n  useEffect(() => {\n    // @posedge\n    if (inc && clk) {\n      dispatch(increment());\n    }\n  }, [inc, clk, dispatch]);\n\n  // Load\n  useEffect(() => {\n    if (load && clk) {\n      // @posedge Load from the bus on the posedge of the clock.\n      dispatch(pcLoad(input));\n    }\n  }, [load, clk, input, dispatch]);\n\n  let className = 'busDisconnected';\n  if (co) {\n    className = 'busOut';\n  }\n  return (\n    <div id=\"pc\" className={`module ${className}`}>\n      <div className=\"name\">ProgramCounter: </div>\n      <div className=\"value\">{value}</div>\n    </div>\n  );\n};\n\n/*\nclass ProgramCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // always @(posedge reset)\n    if (this.props.reset === true) {\n      if (this.props.reset !== prevProps.reset) {\n        this.setState({ value: 0 });\n      }\n\n      // Ignore the clock while held in reset.\n      return;\n    }\n\n    // always @(oe)\n    if (this.props.co !== prevProps.co) {\n      // Output enable\n      if (this.props.co) {\n        this.props.bus(this.state.value);\n      }\n    }\n\n    // always @(posedge clk)\n    if (this.props.clk !== prevProps.clk && this.props.clk === true) {\n      let value = this.state.value;\n      if (this.props.inc) {\n        // Increment, but only 16 x 16 memory!\n        value++;\n        if (value > 15) {\n          value = 0;\n        }\n        this.setState({ value });\n      } else if (this.props.load) {\n        // Load from the input.\n        value = this.props.in;\n        this.setState({ value });\n      }\n    }\n  }\n\n  render() {\n    let className = 'busDisconnected';\n    if (this.props.co) {\n      className = 'busOut';\n    }\n    return (\n      <div id=\"pc\" className={`module ${className}`}>\n        <div className=\"name\">ProgramCounter: </div>\n        <div className=\"value\">{this.state.value}</div>\n      </div>\n    );\n  }\n}\n*/\n\nexport default ProgramCounter;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { program } from './program';\n\nexport const ramSlice = createSlice({\n  name: 'ram',\n  initialState: {\n    value: 0,\n    address: 0,\n  },\n\n  reducers: {\n    load: (state, action) => {\n      state.address = action.payload;\n      const memory = program();\n      state.value = memory[state.address];\n    },\n  },\n});\n\nexport const { load } = ramSlice.actions;\n\nexport const selectRamValue = state => state.ram.value;\nexport const selectRamAddress = state => state.ram.address;\n\nexport default ramSlice.reducer;\n","\nexport const program = () => {\n  return [\n    0x1E,\n    0x2F,\n    0xE0,\n    0xF0,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x1C,\n    0x0E,\n  ];\n}\n\nexport default program;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  selectRamValue,\n  selectRamAddress,\n  load as ramLoad,\n} from '../../features/ram/ramSlice';\n\nconst Ram = ({ readAddress, ro, out }) => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectRamValue);\n  const addr = useSelector(selectRamAddress);\n\n  // Output enable\n  useEffect(() => {\n    if (ro) {\n      out(value);\n    }\n  }, [ro, out, value]);\n\n  // Load\n  useEffect(() => {\n    // always @readAddress\n    dispatch(ramLoad(readAddress));\n  }, [readAddress, dispatch]);\n\n  let className = 'busDisconnected';\n  if (ro) {\n    className = 'busOut';\n  }\n  return (\n    <div id=\"ram\" className={`module ${className}`}>\n      <div className=\"name\">RAM: </div>\n      <div className=\"value\">\n        0x{value.toString(16).toUpperCase()}\n        ({value}) [ addr: {addr} ]\n      </div>\n    </div>\n  );\n};\n\n/*\nclass Ram extends React.Component {\n  constructor(props) {\n    super(props);\n    // Hard coded for now\n    // The program for 28 + 14 :-)\n    this.memory = [\n      0x1E,\n      0x2F,\n      0xE0,\n      0xF0,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x1C,\n      0x0E,\n    ];\n\n    // Set the value to memory address 0;\n    this.state = {\n      value: this.memory[0],\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // always @(addr)\n    if (this.props.ro !== prevProps.ro) {\n      // RAM out.\n      if (this.props.ro && Number.isInteger(this.props.readAddress)) {\n        const value = this.memory[this.props.readAddress];\n        this.setState({ value });\n        this.props.out(value);\n      }\n    }\n  }\n\n  render() {\n    let className = 'busDisconnected';\n    if (this.props.ro) {\n      className = 'busOut';\n    }\n    return (\n      <div id=\"ram\" className={`module ${className}`}>\n        <div className=\"name\">RAM: </div>\n        <div className=\"value\">\n          0x{this.state.value.toString(16).toUpperCase()}\n          ({this.state.value})\n        </div>\n      </div>\n    );\n  }\n}\n*/\n\nexport default Ram;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const registerSlice = createSlice({\n  name: 'register',\n  initialState: {\n    values: {\n      regInstruction: 0,\n      regMar: 0,\n      regA: 0,\n      regB: 0,\n      regOut: 0,\n    },\n  },\n  reducers: {\n    reset: state => {\n      state.values = {}; // NO! must be same as initial state\n    },\n    load: (state, action) => {\n      state.values[action.payload.key] = action.payload.value;\n    },\n  },\n});\n\nexport const { reset, load } = registerSlice.actions;\n\nexport const selectRegisters = state => state.register.values;\n\nexport default registerSlice.reducer;\n","\nimport React, { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectRegisters,\n  reset as regReset,\n  load as regLoad\n} from '../../features/register/registerSlice';\n\nconst Register = ({reset, clk, input, id, name, oe, load, out}) => {\n  const dispatch = useDispatch();\n\n  // Have to get all the register values\n  const values = useSelector(selectRegisters);\n  const value = values[id] ? values[id] : 0;\n\n  const inputRef = useRef(input);\n\n  useEffect(() => {\n    if (reset === true) {\n      dispatch(regReset());\n    }\n  }, [reset, dispatch]);\n\n  useEffect(() => {\n    if (oe) {\n      out(value);\n    }\n  }, [oe, value, out]);\n\n  // always @input\n  // change the current input value whenever it changes.\n  useEffect(() => {\n    if (input) {\n      inputRef.current = input;\n    }\n  }, [input]);\n\n  useEffect(() => {\n    if (load && clk) {\n      // console.log(`REG LOAD: ${inputRef.current}`);\n      dispatch(regLoad({key: id, value: inputRef.current}));\n    }\n  // If the input is a dependency the load\n  // is always happening when input changes rather than just once.\n  }, [load, clk, id, dispatch]);\n\n  let className = 'busDisconnected';\n  if (oe) {\n    className = 'busOut';\n  }\n  return (\n    <div className={`module reg ${className}`}>\n      <div className=\"name\">{name}: </div>\n      <div className=\"value\">\n        0x{value.toString(16).toUpperCase()} ({value})\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const aluSlice = createSlice({\n  name: 'alu',\n  initialState: {\n    value: 0,\n  },\n\n  reducers: {\n    calculate: (state, action) => {\n      let { regA, regB, sub } = action.payload;\n      if (!Number.isInteger(regA)) {\n        regA = 0;\n      }\n      if (!Number.isInteger(regB)) {\n        regB = 0;\n      }\n\n      if (sub) {\n        state.value = regA - regB;\n      } else {\n        state.value = regA + regB;\n      }\n\n    },\n  },\n});\n\nexport const { calculate } = aluSlice.actions;\n\nexport const selectAlu = state => state.alu.value;\n\nexport default aluSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  selectAlu,\n  calculate\n} from '../../features/alu/aluSlice';\n\n\nconst Alu = ({ regA, regB, sub, eo, out}) => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectAlu);\n\n  useEffect(() => {\n    dispatch(calculate({\n      regA,\n      regB,\n      sub,\n    }));\n  }, [regA, regB, sub, dispatch]);\n\n  useEffect(() => {\n    if (eo) {\n      out(value);\n    }\n  }, [eo, value, out]);\n\n  let className = 'busDisconnected';\n  if (eo) {\n    className = 'busOut';\n  }\n  return (\n    <div id=\"alu\" className={`module ${className}`}>\n      <div className=\"name\">Sum: </div>\n      <div className=\"value\">{value}</div>\n    </div>\n  );\n};\n\n/*\nclass Alu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // always @(regA or regB)\n    if (this.props.regA !== prevProps.regA || this.props.regB !== prevProps.regB) {\n      // Perfom calculation\n      // @todo subtraction\n      this.setState({ value: this.props.regA + this.props.regB });\n    }\n\n    // always @(eo)\n    if (this.props.eo !== prevProps.eo) {\n      // Output enable\n      if (this.props.eo) {\n        this.props.bus(this.state.value);\n      }\n    }\n  }\n\n  render() {\n    let className = 'busDisconnected';\n    if (this.props.eo) {\n      className = 'busOut';\n    }\n    return (\n      <div id=\"alu\" className={`module ${className}`}>\n        <div className=\"name\">Sum: </div>\n        <div className=\"value\">{this.state.value}</div>\n      </div>\n    );\n  }\n}\n*/\n\nexport default Alu;\n","\n\nexport const rom = () => {\n  const rom = [];\n  // Fill with 0\n  for (let i = 0; i <= 256; i++) {\n    rom[i] = 0;\n  }\n\n  // RESET\n  rom[0] = 0x4004;\n  rom[1] = 0x1408;\n\n  // LDA\n  rom[16] = 0x4004;\n  rom[17] = 0x1408;\n  rom[18] = 0x4800;\n  rom[19] = 0x1200;\n\n  // ADD\n  rom[32] = 0x4004;\n  rom[33] = 0x1408;\n  rom[34] = 0x4800;\n  rom[35] = 0x1020;\n  rom[36] = 0x280;\n\n  // OUT\n  rom[224] = 0x4004;\n  rom[225] = 0x1408;\n  rom[226] = 0x110;\n\n  // HALT\n  rom[240] = 0x8000;\n\n  return rom;\n}\n\nexport default rom;","import { createSlice } from '@reduxjs/toolkit';\nimport { rom } from './isa_rom';\n\nconst bitRead = (value, bit) => {\n  return (value >> bit) & 0x01;\n};\n\n/**\n * Extract the rom value to a json object of the control word.\n * @param {integer} value\n */\nconst decode = value => {\n  return {\n    hlt: bitRead(value,15), // Halt\n    mi: bitRead(value, 14), // MAR in\n    ri: bitRead(value, 13), // RAM in\n    ro: bitRead(value, 12), // RAM out\n    io: bitRead(value, 11), // Instruction out\n    ii: bitRead(value, 10), // Instruction in\n    ai: bitRead(value, 9),  // A register in\n    ao: bitRead(value, 8),  // A register out\n    eo: bitRead(value, 7),  // ALU out\n    su: bitRead(value, 6),  // Subtract\n    bi: bitRead(value, 5),  // B register in\n    oi: bitRead(value, 4),  // Output register in\n    ce: bitRead(value, 3),  // Counter enable\n    co: bitRead(value, 2),  // Counter out\n    j:  bitRead(value, 1),  // Jump\n    jc: bitRead(value, 0),  // Jump conditional\n  };\n};\n\nexport const controllerSlice = createSlice({\n  name: 'controller',\n  initialState: {\n    romValue: 0,\n    cw: decode(0),\n    address: 0,\n  },\n\n  reducers: {\n    buildControlWord: (state, action) => {\n      const memory = rom();\n      let { regInstruction, ucount } = action.payload;\n      if (!Number.isInteger(regInstruction)) {\n        regInstruction = 0;\n      }\n\n      // The instruction is the higher nibble of what comes from the Ram.\n      // The lower nibble byte of Ram is the operand.\n      // So mask off the lower nibble.\n      const instruction = regInstruction & 0xF0;\n      // The lower nibble is the micro code counter value.\n      // console.log(regInstruction, instruction, ucount, instruction | ucount);\n      state.readAddress = instruction | ucount;\n      state.romValue = memory[state.readAddress];\n      state.cw = decode(state.romValue);\n      // console.log(state.cw)\n    },\n  },\n});\n\nexport const { buildControlWord } = controllerSlice.actions;\n\nexport const selectRomValue = state => state.controller.romValue;\nexport const selectControlWord = state => state.controller.cw;\nexport const selectControlAddr = state => state.controller.readAddress;\n\nexport default controllerSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  selectRomValue,\n  buildControlWord,\n  selectControlAddr,\n} from '../../features/controller/controllerSlice';\n\nconst Controller = ({ counter, ram}) => {\n  const dispatch = useDispatch();\n  const romValue = useSelector(selectRomValue);\n  const addr = useSelector(selectControlAddr);\n\n  useEffect(() => {\n    dispatch(buildControlWord({\n      ucount: counter,\n      regInstruction: ram,\n    }));\n  }, [counter, ram, dispatch]);\n\n  return (\n    <div id=\"controller\" className=\"module\">\n      <div className=\"name\">Control word: </div>\n      <div className=\"value\">\n        {romValue.toString(16).toUpperCase()} (addr: {addr})\n      </div>\n    </div>\n  );\n};\n\nexport default Controller;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const cpuSlice = createSlice({\n  name: 'cpu',\n  initialState: {\n    reset: false, // Reset to start values\n  },\n  reducers: {\n    reset: (state, action) => {\n      state.reset = action.payload;\n    },\n  },\n});\n\nexport const {\n  reset,\n} = cpuSlice.actions;\n\nexport const selectReset = state => state.cpu.reset;\n\nexport default cpuSlice.reducer;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Clock from './Clock';\nimport MicroCodeCounter from './MicroCodeCounter';\nimport Bus from './Bus';\nimport ProgramCounter from './ProgramCounter';\nimport Ram from './Ram';\nimport Register from './Register'\nimport Alu from './Alu'\nimport Controller from './Controller';\n\nimport { selectReset } from '../../features/cpu/cpuSlice';\nimport { selectClock } from '../../features/clock/clockSlice';\nimport { selectUCount } from '../../features/controller/ucounterSlice';\nimport { selectRegisters } from '../../features/register/registerSlice';\nimport { selectControlWord } from '../../features//controller/controllerSlice';\nimport {\n  selectBus,\n  setBus,\n} from '../../features/bus/busSlice';\n\nimport '../../css/cpu.css';\n\nconst Cpu = () => {\n  const dispatch = useDispatch();\n\n  const reset = useSelector(selectReset);\n  const clk = useSelector(selectClock);\n  const ucount = useSelector(selectUCount);\n  const bus = useSelector(selectBus);\n  const registers = useSelector(selectRegisters);\n  const controlWord = useSelector(selectControlWord);\n\n  return (\n    <div id=\"cpu\">\n\n      <Clock halt={controlWord.hlt} />\n      <MicroCodeCounter\n        clk={clk}\n        reset={reset}\n      />\n      <Bus />\n\n      <ProgramCounter\n        clk={clk}\n        reset={reset}\n        inc={controlWord.ce}\n        load={controlWord.j}\n        input={bus}\n        co={controlWord.co}\n        out={(val) => dispatch(setBus(val))}\n      />\n\n      <Register\n        name=\"Memory Address Register\"\n        id=\"regMar\"\n        clk={clk}\n        reset={reset}\n        load={controlWord.mi}\n        input={bus}\n        oe={false} // No output enable for the MAR.\n      />\n      <Ram\n        clk={clk}\n        readAddress={registers['regMar']}\n        ro={controlWord.ro}\n        out={(val) => dispatch(setBus(val))}\n      />\n      <Register\n        name=\"Instruction Register\"\n        id=\"regInstruction\"\n        clk={clk}\n        reset={reset}\n        load={controlWord.ii}\n        input={bus}\n        oe={controlWord.io}\n        out={(val) => dispatch(setBus(val & 0xF))} // Only lower 4 bits to the bus\n      />\n      <Controller\n        counter={ucount}\n        ram={registers['regInstruction']}\n      />\n\n      <Register\n        name=\"A Register\"\n        id=\"regA\"\n        clk={clk}\n        reset={reset}\n        load={controlWord.ai}\n        input={bus}\n        oe={controlWord.ao}\n        out={(val) => dispatch(setBus(val))}\n      />\n      <Register\n        name=\"B Register\"\n        id=\"regB\"\n        clk={clk}\n        reset={reset}\n        load={controlWord.bi}\n        input={bus}\n        oe={false}\n      />\n\n      <Alu\n        regA={registers['regA']}\n        regB={registers['regB']}\n        sub={false}\n        eo={controlWord.eo}\n        out={(val) => dispatch(setBus(val))}\n      />\n\n      <Register\n        name=\"Output\"\n        id=\"regOut\"\n        clk={clk}\n        reset={reset}\n        load={controlWord.oi}\n        input={bus}\n        oe={false}\n      />\n\n    </div>\n  );\n};\n\n\n/*\nclass Cpu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      reset: false,     // Reset to start values\n      clk: false,       // Cpu clock\n      uCount: false,    // Microcode counter\n      bus: 0,           // The main bus\n      regA: 0,\n      regB: 0,\n      regInstruction: 0,\n      regMar: 0,\n      controlWord: {},\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"cpu\">\n\n        <Clock\n          halt={this.state.controlWord.hlt}\n        />\n\n        <Bus />\n\n        <ProgramCounter\n          clk={this.state.clk}\n          reset={this.state.reset}\n          inc={this.state.controlWord.ce}\n          load={this.state.controlWord.j}\n          in={this.state.bus}\n          co={this.state.controlWord.co}\n          bus={(val) => this.setBus(val)}\n        />\n        <MicroCodeCounter\n          clk={this.state.clk}\n          reset={this.state.reset}\n        />\n\n        <Register\n          name=\"Memory Address Register\"\n          id=\"regMar\"\n          clk={this.state.clk}\n          reset={this.state.reset}\n          load={this.state.controlWord.mi}\n          in={this.state.bus}\n          oe={false} // No output enable for the MAR.\n        />\n        <Ram\n          clk={this.state.clk}\n          readAddress={this.state.regMar}\n          ro={this.state.controlWord.ro} // Output enable\n          bus={(val) => this.setBus(val)}\n        />\n\n        <Register\n          name=\"Instruction Register\"\n          id=\"regInstruction\"\n          clk={this.state.clk}\n          reset={this.state.reset}\n          load={this.state.controlWord.ii}\n          in={this.state.bus}\n          oe={this.state.controlWord.io}\n          out={(val) => this.setBus(val & 0xF)} // Only lower 4 bits to the bus\n        />\n        <Controller\n          counter={this.state.uCount}\n          in={this.state.regInstruction}\n          update={(val) => this.updateState('controlWord', val)}\n        />\n\n        <Register\n          name=\"A Register\"\n          id=\"regA\"\n          clk={this.state.clk}\n          reset={this.state.reset}\n          load={1} // {this.state.controlWord.ai}\n          in={this.state.bus}\n          oe={this.state.controlWord.ao}\n          out={(val) => this.setBus(val)}\n        />\n        <Register\n          name=\"B Register\"\n          id=\"regB\"\n          clk={this.state.clk}\n          reset={this.state.reset}\n          load={this.state.controlWord.bi}\n          in={this.state.bus}\n          oe={false}\n        />\n        <Alu\n          regA={this.state.regA}\n          regB={this.state.regB}\n          eo={this.state.controlWord.eo}\n          bus={(val) => this.setBus(val)}\n        />\n\n        <Register\n          name=\"Output\"\n          id=\"regOut\"\n          clk={this.state.clk}\n          reset={this.state.reset}\n          load={this.state.controlWord.oi}\n          in={this.state.bus}\n          oe={false}\n        />\n\n      </div>\n    );\n  }\n\n  setBus(value) {\n    this.setState({ bus: value });\n  }\n\n  updateState(key, state) {\n    this.setState({ [key]: state });\n  }\n\n}\n*/\n\nexport default Cpu;\n","import React, { useRef, useEffect } from 'react';\n\nconst Canvas = props => {\n  const { name, clk, waveform, signal, ...rest} = props;\n\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    waveform.update(ctx, signal);\n    // signal intentionally not in the list as update should only happen on clk changes\n  }, [clk, waveform]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"waveform\">\n      <div className=\"name\">{name}:</div>\n      <canvas className=\"canvas\" ref={canvasRef} {...rest}/>\n    </div>\n  );\n};\n\nexport default Canvas;\n","\nclass Waveform {\n  constructor(strokeStyle = '#0000FF') {\n    this.startX = 0;\n    this.startY = 0;\n    this.currentX = 0;\n    this.currentY = 0;\n    this.width = 10;\n    this.height = 15;\n    this.strokeStyle = strokeStyle;\n    this.currentSignal = 0;\n  }\n\n  update(ctx, signal) {\n    const xStart = this.currentX;\n    const yStart = this.currentY;\n    const xEnd = this.currentX + this.width;\n    this.currentX = xEnd;\n    let yEnd;\n    if (this.currentSignal !== signal) {\n      yEnd = this.currentSignal ? this.height : 0;\n    } else {\n      yEnd = this.currentSignal ? 0 : this.height;\n    }\n\n    this.currentY = yEnd;\n\n    ctx.strokeStyle = this.strokeStyle;\n    ctx.beginPath();\n    ctx.moveTo(xStart, yStart);\n    ctx.lineTo(xStart, yEnd);\n    ctx.lineTo(xEnd, yEnd);\n    ctx.stroke();\n    // Stroke again for a stronger line.\n    ctx.stroke();\n    this.currentSignal = signal;\n  };\n\n};\n\nexport default Waveform;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Led from './Led';\nimport Controller from '../components/LogicAnalyser/Controller';\nimport Canvas from '../components/LogicAnalyser/Canvas';\n\nimport { selectClock } from '../features/clock/clockSlice';\nimport { selectControlWord } from '../features/controller/controllerSlice';\n\nimport '../css/visual.css';\n\nimport Waveform from './LogicAnalyser/lib/Waveform';\n\nconst waves = [];\nwaves['clk'] = new Waveform('#dc143c');\nwaves['jc'] = new Waveform('#00004f');\nwaves['j'] = new Waveform('#00004f');\nwaves['ce'] = new Waveform('#051700');\nwaves['co'] = new Waveform('#051700');\nwaves['oi'] = new Waveform();\nwaves['bi'] = new Waveform();\nwaves['su'] = new Waveform();\nwaves['eo'] = new Waveform();\nwaves['ao'] = new Waveform();\nwaves['ai'] = new Waveform();\nwaves['ii'] = new Waveform('#051700');\nwaves['io'] = new Waveform();\nwaves['ro'] = new Waveform('#051700');\nwaves['ri'] = new Waveform();\nwaves['mi'] = new Waveform('#051700');\nwaves['hlt'] = new Waveform('#000000');\n\nconst Visual = () => {\n  const clk = useSelector(selectClock);\n  const controlWord = useSelector(selectControlWord);\n\n  const width = 600;\n  const height = 20;\n  return (\n    <div id=\"visual\">\n\n      <div className=\"logicAnalyser\">\n\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name=\"Clock\" waveform={waves['clk']} signal={clk} />\n\n        {/* Fetch */}\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Counter out [co ${controlWord.co}]`} waveform={waves['co']} signal={controlWord.co} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`MAR in [mi ${controlWord.mi}]`} waveform={waves['mi']} signal={controlWord.mi} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`RAM out [co ${controlWord.ro}]`} waveform={waves['ro']} signal={controlWord.ro} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Instruction in [ii ${controlWord.ii}]`} waveform={waves['ii']} signal={controlWord.ii} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Counter enable [ce ${controlWord.ce}]`} waveform={waves['ce']} signal={controlWord.ce} />\n        {/* end fetch */}\n\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Instruction out [io ${controlWord.io}]`} waveform={waves['io']} signal={controlWord.io} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Subtract [su ${controlWord.su}]`} waveform={waves['su']} signal={controlWord.su} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`A register in [ai ${controlWord.ai}]`} waveform={waves['ai']} signal={controlWord.ai} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`B register in [bi ${controlWord.bi}]`} waveform={waves['bi']} signal={controlWord.bi} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`ALU out [eo ${controlWord.eo}]`} waveform={waves['eo']} signal={controlWord.eo} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`A register out [ao ${controlWord.ao}]`} waveform={waves['ao']} signal={controlWord.ao} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Output register in [oi ${controlWord.oi}]`} waveform={waves['oi']} signal={controlWord.oi} />\n\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`RAM in [ri ${controlWord.ri}]`} waveform={waves['ri']} signal={controlWord.ri} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Jump [j ${controlWord.j}]`} waveform={waves['j']} signal={controlWord.j} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Jump conditional [jc ${controlWord.jc}]`} waveform={waves['jc']} signal={controlWord.jc} />\n        <Canvas width={width} height={height} className=\"canvas\" clk={clk}\n          name={`Halt [hlt ${controlWord.hlt}]`} waveform={waves['hlt']} signal={controlWord.hlt} />\n\n      </div>\n    </div>\n  );\n}\n\nexport default Visual;\n","import React from 'react';\n\nimport Cpu from './Cpu/Cpu';\nimport Visual from './Visual';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n\n        <Cpu />\n        <Visual />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport cpuReducer from '../features/cpu/cpuSlice';\nimport clockReducer from '../features/clock/clockSlice';\nimport busReducer from '../features/bus/busSlice';\nimport registerReducer from '../features/register/registerSlice';\nimport ucounterReducer from '../features/controller/ucounterSlice'\nimport programCounterReducer from '../features/controller/programCounterSlice'\nimport controllerReducer from '../features/controller/controllerSlice';\nimport aluReducer from '../features/alu/aluSlice';\nimport ramReducer from '../features/ram/ramSlice';\n\nexport default configureStore({\n  reducer: {\n    cpu: cpuReducer,\n    clock: clockReducer,\n    bus: busReducer,\n    register: registerReducer,\n    ucounter: ucounterReducer,\n    programCounter: programCounterReducer,\n    controller: controllerReducer,\n    alu: aluReducer,\n    ram: ramReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}